<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端开发 on 半生不熟 | Amber</title>
    <link>https://wdanna.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 前端开发 on 半生不熟 | Amber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Tue, 07 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wdanna.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 Javascript 实现空格键的功能</title>
      <link>https://wdanna.com/posts/blog/2019-05/%E7%94%A8-javascript-%E5%AE%9E%E7%8E%B0%E7%A9%BA%E6%A0%BC%E9%94%AE%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2019-05/%E7%94%A8-javascript-%E5%AE%9E%E7%8E%B0%E7%A9%BA%E6%A0%BC%E9%94%AE%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description>最近在做 Accessibility 相关的东西时候，又发现了一个坑，就是跟这个看似完美的tabindex=0的有关。 其实究其原因，还是年轻的我不仔细看文档导致的，但我觉得文档没有特别强调的但是确实很重要的东西就有可能是未来的坑，所以还是想分享一下给大家。 要实现的需求大概是这样的 有一个选择框是这个样子的，我们叫它 可以搜索的 Listbox，可以点击打开里面的List选择，也可以点击输入你想要的国家英文名称，它会模糊进行 Filt</description>
    </item>
    
    <item>
      <title>又被坑了之自动跳转</title>
      <link>https://wdanna.com/posts/blog/2018-11/%E5%8F%88%E8%A2%AB%E5%9D%91%E4%BA%86%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2018-11/%E5%8F%88%E8%A2%AB%E5%9D%91%E4%BA%86%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Accessibility 我们能做些什么(下)</title>
      <link>https://wdanna.com/posts/blog/2018-11/accessibility-%E6%88%91%E4%BB%AC%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88%E4%B8%8B/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2018-11/accessibility-%E6%88%91%E4%BB%AC%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88%E4%B8%8B/</guid>
      <description>在上篇的 不能永远忽略的 Accessibility (上) 中了解到了真正的 Accessibility 的是什么以及为什么要关注它，同样，想必你也看到了它那些看了也不知道具体该怎么做的规范吧，那对于一个前端工程师来说，究竟我们需要怎么做呢，今天就来说说围绕 WCAG 2.0 的规范我们可以怎么做。 HTML 语义化 标题，段落，列表等内容的保持良好的结构 正确地使用各个语义化的标签，不仅是自身代码质量的提高，对阅读你代码的人，也会有极大的帮助，同样对于开发成本，网站的SEO来说都是</description>
    </item>
    
    <item>
      <title>不能永远忽略的 Accessibility (上)</title>
      <link>https://wdanna.com/posts/blog/2018-10/%E4%B8%8D%E8%83%BD%E6%B0%B8%E8%BF%9C%E5%BF%BD%E7%95%A5%E7%9A%84accessibility%E4%B8%8A/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2018-10/%E4%B8%8D%E8%83%BD%E6%B0%B8%E8%BF%9C%E5%BF%BD%E7%95%A5%E7%9A%84accessibility%E4%B8%8A/</guid>
      <description>我们可能都见过的 不知道你有没有注意到，身边有很多每天都在用的东西，很多特别好用也习惯了在用的东西，好像从来都只是觉得很好用，并没有真正思考过设计它们的本来用意，或者换句话说叫思考过它为什么要做成那个样子。 比如你有没有想过很多电梯里为什么设计成半透明的，或者直接四面都是镜子呢？它其实是为了增加空间感，让人们觉得不太压抑，甚至可以在等电梯的时候可以整理自己的衣物或者照照镜子，不会觉得等电梯的时候无聊，</description>
    </item>
    
    <item>
      <title>浏览器 HTTP Caching 策略 (已验证)</title>
      <link>https://wdanna.com/posts/blog/2018-08/%E6%B5%8F%E8%A7%88%E5%99%A8-http-caching-%E7%AD%96%E7%95%A5-%E5%B7%B2%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2018-08/%E6%B5%8F%E8%A7%88%E5%99%A8-http-caching-%E7%AD%96%E7%95%A5-%E5%B7%B2%E9%AA%8C%E8%AF%81/</guid>
      <description>很多人会觉得 HTTP 的 Caching 策略很难，我之前也不例外，究其原因，它是乌龟的屁股，规定（龟腚），在官方介绍中也没有给出简单有效的事实验证，自己也没有相对多的机会去实践验证。 这样一来，很容易让人对它的认识比较模糊，也就很容易被忽略，有机会前两天和 项目组大牛 Pair 研究了之后，想出了一个较为简单方法可以快速地验证了一些 Case，通过一些测试用例可以清楚地得出一些结论，文末会给出 repo 的地址。 Cache 说到缓存，知乎上看到过这样一个</description>
    </item>
    
    <item>
      <title>Flex布局也就这么多</title>
      <link>https://wdanna.com/posts/blog/2017-12/flex%E5%B8%83%E5%B1%80%E4%B9%9F%E5%B0%B1%E8%BF%99%E4%B9%88%E5%A4%9A/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-12/flex%E5%B8%83%E5%B1%80%E4%B9%9F%E5%B0%B1%E8%BF%99%E4%B9%88%E5%A4%9A/</guid>
      <description>还清楚记得第一次用Flex实现了垂直居中的时候，我那各种unbelievable的心情，然后就深深喜欢上了这个好玩的东西 为什么出现 关于Flex布局的出现解决了的问题，个人总结了以下几点原因。 先看看到现在WEB布局的一个发展吧 传统的布局都是基于盒模型，然后设置各种display和position，必要时再加上相应地float，想必写过CSS的同学都感受到过，实现一些复杂的布局会非常不方便，有时候自己</description>
    </item>
    
    <item>
      <title>模态框和禁止页面滚动</title>
      <link>https://wdanna.com/posts/blog/2017-11/%E6%A8%A1%E6%80%81%E6%A1%86%E5%92%8C%E7%A6%81%E6%AD%A2%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-11/%E6%A8%A1%E6%80%81%E6%A1%86%E5%92%8C%E7%A6%81%E6%AD%A2%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8/</guid>
      <description>问题 今天帮朋友看了一个问题，是要实现点击按钮出现一个弹框以及背景遮罩的功能。 因为项目在用Bootstrap，所以第一想法当然是直接用Bootstrap的模态框，但是奇葩的是一直出现闪退的情况，但之前从来没有遇到这种情况，就去搜了下。 看到大部分人都说一般是因为JS文件发生了冲突，想了想可能项目引入的库有重写模态框的东西，但是试了半天也没有找到是哪个文件，于是决定换一种方式了，因为项目原因，要尽量少用</description>
    </item>
    
    <item>
      <title>React那些事</title>
      <link>https://wdanna.com/posts/blog/2017-09/react%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-09/react%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>背景 React是=起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 都不满意，就决定自己写一套，用来架设 Instagram 的网站，2013年5月开源 WHAT 官网是这样解释的 —— A JavaScript library for building user interfaces，三大特性如下： * Declarative 声明式编程，告诉机器你想要什么（What），让机器想出如何做（How）， 对应的是命令式编程，命令机器如何去做某件事（How），而不管你要的是什么，它都会按照你的命令实现。 * Component-Based 任何一个功能独立的模块都</description>
    </item>
    
    <item>
      <title>动手前记得问自己一个问题</title>
      <link>https://wdanna.com/posts/blog/2017-08/%E5%8A%A8%E6%89%8B%E5%89%8D%E8%AE%B0%E5%BE%97%E9%97%AE%E8%87%AA%E5%B7%B1%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-08/%E5%8A%A8%E6%89%8B%E5%89%8D%E8%AE%B0%E5%BE%97%E9%97%AE%E8%87%AA%E5%B7%B1%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <description>在写任何页面之前记得问自己一个问题 — 真的确定看清楚了吗？ 要实现的页面 乍一看挺简单的一张页面，但是写完后和大神交流了下才发现，很多东西是我没有看清楚的，更或者说一些东西只看到了其中的一部分，写完反复感受了下大神提到的需要改进的地方，在这里简单总结了一下。 我们想的一样吗 有兴趣的可以试试按自己的想法划分一下这个页面，挺好玩的。 按功能块划分大的整体应该是分三部分的，依据有背景颜色、页面功能、重复性用户体验</description>
    </item>
    
    <item>
      <title>CSS 实现动态百分比圆环</title>
      <link>https://wdanna.com/posts/blog/2017-08/css-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF/</link>
      <pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-08/css-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF/</guid>
      <description>#效果展示 没掌握上传动图的操作，这里就先截静态图吧 实现思路 自己的思路 一开始看到这个图的时候，想着应该不难 * 外面一个div，里面一个div，一个背景深蓝色，一个背景白色 * 蓝色的div加一个伪元素，背景浅蓝色，再裁剪一半 还是先试试，写着写着发现中间各种设置四周边距，才让中间div居中，我都看不下去了 参考了别人的思路 看了有很多例子，一开始没看懂的时候，觉得都写的什么呀，有这么复杂吗，但不知道怎么就突然开</description>
    </item>
    
    <item>
      <title>前端学习网站整理</title>
      <link>https://wdanna.com/posts/blog/2017-06/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-06/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%95%B4%E7%90%86/</guid>
      <description>配置 nvm 国内版本（命令行下执行） sh -c &amp;quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot; 配置 cnpm 方法(淘宝NPM镜像) 一套绝佳的图表字体和 CSS 框架 React 适合初学者学习 React 的网站-中文 React项目新手指南 适合初学者学习 React 的网站-视频 使用React-router和Webpack快速构建一个react程序 React结合redux实现一个todoList 深入理解 react-router 路由系统 Bootstrap Bootstrap所有组建模板 Bootstrap做的登录界面优化版 Bootsnipp 一个网页设计师和网站</description>
    </item>
    
    <item>
      <title>Jenkins安装和配置</title>
      <link>https://wdanna.com/posts/blog/2017-04/jenkins%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2017-04/jenkins%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>一、作用 项目中一直在用Jenkins，但自己对这部分的开发参与的不是很多，最近准备毕设的时候才开始慌了，倒腾了大半天，之前也有人问我，就准备整理了下相关知识，也便以后回顾。 我们在做项目的时候简单来说一般会有这五个步骤，开发—&amp;gt;提交—&amp;gt;编译—&amp;gt;测试—&amp;gt;部署。人工的流程走就是把项目同步到Git，再用 SSH 登录服务器把项目pull下来，再migrate数据库，运行单元测试和迁移静态资</description>
    </item>
    
    <item>
      <title>与Ruby的第一天</title>
      <link>https://wdanna.com/posts/blog/2016-12/%E4%B8%8Eruby%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-12/%E4%B8%8Eruby%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid>
      <description>1、学习使我快乐 早就听说Ruby这个语言的表达能力是一般的语言不能比的，现在终于有机会见识见识啦，虽然一开始是拒绝的，但古人不常说嘛，学如逆水行舟，不进则退～何况语言都是相通的，那就开始吧 2、基本用法（与之前学过的比较） 定义类 在 Ruby 中，类总是以关键字 class 开始，后跟类的名称。类名的首字母应该大写，例如 class Customer 创建对象 下面的实例创建了类 Customer 的两个对象 cust1 和 cust2： cust1 = Customer. new cust2 = Customer. new 创建数组 names = Array.new 设置全局变量 全局</description>
    </item>
    
    <item>
      <title>HTML 那些事儿</title>
      <link>https://wdanna.com/posts/blog/2016-12/html-%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-12/html-%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid>
      <description>1、第一个需求 我的思考 最外层的是两个无序列表（&amp;lt;ul&amp;gt;标签） 靠近最外层的分别是两个有序列表（&amp;lt;ol&amp;gt;标签） 最里层的也是无序列表（&amp;lt;ul&amp;gt;标签），这里应有一个type=“square”的属性 所有列表项目都需要使用&amp;lt;li&amp;gt; 标签 实现效果 错误纠正 对于开始理解的无序列表添加type=“square”的属性那块，在这里是不需要加的，因为默认的无序列表的嵌套结构是</description>
    </item>
    
    <item>
      <title>今天聊聊 CSS</title>
      <link>https://wdanna.com/posts/blog/2016-12/%E4%BB%8A%E5%A4%A9%E8%81%8A%E8%81%8A-css/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-12/%E4%BB%8A%E5%A4%A9%E8%81%8A%E8%81%8A-css/</guid>
      <description>1、CSS是什么 CSS全称为Cascading Style Sheets，中文翻译为“层叠样式表”，简称CSS样式表，所以称之为层叠样式表（Cascading Stylesheet）简称CSS。 在网页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色、背景和其它效果实现更加精确的控制。只要对相应的代码做一些简单的修改，就可以改变同一页面的不同部分，或者页数不同的网页的外观和格式。 2、CSS作用 CSS具有对</description>
    </item>
    
    <item>
      <title>Ruby on rails 环境配置</title>
      <link>https://wdanna.com/posts/blog/2016-12/ruby-on-rails-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-12/ruby-on-rails-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>配置之前 从开始到现在不知道怀疑了多少遍网速，从实验室的无线到有线，从学校的CMCC到EDU到xayd，不知道执行了多少遍Ctrl V 和 Ctrl C，终于，功夫不负有心人，它成功了！！！ 周围有同学用apt-get安装的，有用rbenv安装的，也有用rvm安装的，这里简单介绍下它们分别是什么吧 &amp;gt;rvm 的设计理念是自动化，全面。 rbenv 的设计理念是规范化，小核。 apt-get只能安装一个版本，如果使用了sudo apt-get update</description>
    </item>
    
    <item>
      <title>WebStorm卡的问题</title>
      <link>https://wdanna.com/posts/blog/2016-10/webstorm%E5%8D%A1%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-10/webstorm%E5%8D%A1%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>很多项目导致WebStorm文件过于庞大，但是WebStorm里面有Excluded功能，用来将某个目录文件，设置为忽略状态，但一般不也轻易设置，比较常见的，一般是node_modules文件夹，解决方法如下 推荐解决方法 把node_modules加入到.gitignore文件中（如果你的项目是git的托管项目，则webstorm会自动把.gitignore里的文件设置为Excluded） 如果没有使</description>
    </item>
    
    <item>
      <title>Concordion 实现 Hello World</title>
      <link>https://wdanna.com/posts/blog/2016-10/concordion-%E5%AE%9E%E7%8E%B0-hello-world/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-10/concordion-%E5%AE%9E%E7%8E%B0-hello-world/</guid>
      <description>读音 踩过一些坑后,每接触一个以新单词命名的知识一定会先搞清楚读音 concordion 是什么 Concordion 是写和管理基于 Java 项目的自动化验收测试的有力工具。 它直接与 JUnit 框架集成，使之可以与所有流行的基于 Java 的 IDE 像 Netbeans 的是，Eclipse，IntelliJ IDEA 的使用 查看结果 好了，知道了它是一个测试工具，那么怎么查看呢&amp;hellip; 当 Concordion 运行测试时，输出XHTML文件显示原规范和测试结果。 成功的测试是使用“绿”色高亮显示，失败的测试使用的是“</description>
    </item>
    
    <item>
      <title>Reflux 实现 hello world</title>
      <link>https://wdanna.com/posts/blog/2016-10/reflux-%E5%AE%9E%E7%8E%B0-hello-world/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-10/reflux-%E5%AE%9E%E7%8E%B0-hello-world/</guid>
      <description>初识Reflux Reflux 是一个简单的单向数据流应用库，灵感来自于ReactJs Flux 解决了数据在React 应用中的流动方式及过程 需求分析 用 Reflux 实现界面渲染 hello world 分解任务 使用 React 创建一个组件，在页面渲染出 hello word 安装 Reflux 创建一个 Action 创建一个 Store，用来监听** Action **，并且获取 Action 传递的 hello world Store 将值传递给 Component，并且渲染到页面 将代码上传至 Github 分步实现任务 使用 React 创建一个组件，在页面渲染出 hello word &#39;use strict&#39;; import React from &#39;react&#39;; import {render} from &#39;react-dom&#39;; const App =</description>
    </item>
    
    <item>
      <title>初学 Reflux</title>
      <link>https://wdanna.com/posts/blog/2016-09/%E5%88%9D%E5%AD%A6-reflux/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-09/%E5%88%9D%E5%AD%A6-reflux/</guid>
      <description>这两天学习了Reflux的基础知识，贯彻5w1h的学习方法，加上思维导图有力地辅助，总结如下 首先戳这里 看官网是必须的 Reflux是什么 Reflux 是一个简单的单向数据流应用库，灵感来自于 ReactJS Flux Flux又是什么 React 标榜自己是 MVC 里面 V 的部分，那么 Flux 就相当于添加 M 和 C 的部分。Flux 是 Facebook 使用的一套前端应用的架构模式 Reflux是谁什么时候提出的 Facebook在2014年4月提出的 Facebook为什么要提出 因为Re</description>
    </item>
    
    <item>
      <title>Linux初学者指南-基本配置</title>
      <link>https://wdanna.com/posts/blog/2016-04/linux%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wdanna.com/posts/blog/2016-04/linux%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</guid>
      <description>安装Ubuntu 1.注意事项 32位与64位版本的取舍 基于性能、稳定性以及硬件成本的综合考虑，我们只推荐使用64位的Linux发行版，同时建议将个人电脑的内存升级到至少4G以上。 本设置指南全部基于64位Linux发行版进行编写。 什么样的电脑适合安装Linux？ 首先，请查阅 Ubuntu 桌面认证硬件列表，其中的品牌电脑具备良好的兼容性，你可以在硬件上减少很多生命的浪费： Ubuntu 桌面认证硬件 所以请优先采购列表中的设备。 如</description>
    </item>
    
  </channel>
</rss>